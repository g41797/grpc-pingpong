// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: producerservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProducerService_Produce_FullMethodName = "/pb.ProducerService/Produce"
)

// ProducerServiceClient is the client API for ProducerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProducerServiceClient interface {
	Produce(ctx context.Context, opts ...grpc.CallOption) (ProducerService_ProduceClient, error)
}

type producerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProducerServiceClient(cc grpc.ClientConnInterface) ProducerServiceClient {
	return &producerServiceClient{cc}
}

func (c *producerServiceClient) Produce(ctx context.Context, opts ...grpc.CallOption) (ProducerService_ProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProducerService_ServiceDesc.Streams[0], ProducerService_Produce_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &producerServiceProduceClient{stream}
	return x, nil
}

type ProducerService_ProduceClient interface {
	Send(*ProduceMessages) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type producerServiceProduceClient struct {
	grpc.ClientStream
}

func (x *producerServiceProduceClient) Send(m *ProduceMessages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *producerServiceProduceClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerServiceServer is the server API for ProducerService service.
// All implementations must embed UnimplementedProducerServiceServer
// for forward compatibility
type ProducerServiceServer interface {
	Produce(ProducerService_ProduceServer) error
	mustEmbedUnimplementedProducerServiceServer()
}

// UnimplementedProducerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProducerServiceServer struct {
}

func (UnimplementedProducerServiceServer) Produce(ProducerService_ProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedProducerServiceServer) mustEmbedUnimplementedProducerServiceServer() {}

// UnsafeProducerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducerServiceServer will
// result in compilation errors.
type UnsafeProducerServiceServer interface {
	mustEmbedUnimplementedProducerServiceServer()
}

func RegisterProducerServiceServer(s grpc.ServiceRegistrar, srv ProducerServiceServer) {
	s.RegisterService(&ProducerService_ServiceDesc, srv)
}

func _ProducerService_Produce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProducerServiceServer).Produce(&producerServiceProduceServer{stream})
}

type ProducerService_ProduceServer interface {
	SendAndClose(*Status) error
	Recv() (*ProduceMessages, error)
	grpc.ServerStream
}

type producerServiceProduceServer struct {
	grpc.ServerStream
}

func (x *producerServiceProduceServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *producerServiceProduceServer) Recv() (*ProduceMessages, error) {
	m := new(ProduceMessages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProducerService_ServiceDesc is the grpc.ServiceDesc for ProducerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProducerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProducerService",
	HandlerType: (*ProducerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Produce",
			Handler:       _ProducerService_Produce_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "producerservice.proto",
}
