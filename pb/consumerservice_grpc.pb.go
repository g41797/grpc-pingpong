// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: consumerservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsumerService_Consume_FullMethodName = "/pb.ConsumerService/Consume"
)

// ConsumerServiceClient is the client API for ConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerServiceClient interface {
	Consume(ctx context.Context, opts ...grpc.CallOption) (ConsumerService_ConsumeClient, error)
}

type consumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerServiceClient(cc grpc.ClientConnInterface) ConsumerServiceClient {
	return &consumerServiceClient{cc}
}

func (c *consumerServiceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (ConsumerService_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConsumerService_ServiceDesc.Streams[0], ConsumerService_Consume_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerServiceConsumeClient{stream}
	return x, nil
}

type ConsumerService_ConsumeClient interface {
	Send(*ConsumeMessages) error
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type consumerServiceConsumeClient struct {
	grpc.ClientStream
}

func (x *consumerServiceConsumeClient) Send(m *ConsumeMessages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *consumerServiceConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerServiceServer is the server API for ConsumerService service.
// All implementations must embed UnimplementedConsumerServiceServer
// for forward compatibility
type ConsumerServiceServer interface {
	Consume(ConsumerService_ConsumeServer) error
	mustEmbedUnimplementedConsumerServiceServer()
}

// UnimplementedConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServiceServer struct {
}

func (UnimplementedConsumerServiceServer) Consume(ConsumerService_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}
func (UnimplementedConsumerServiceServer) mustEmbedUnimplementedConsumerServiceServer() {}

// UnsafeConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServiceServer will
// result in compilation errors.
type UnsafeConsumerServiceServer interface {
	mustEmbedUnimplementedConsumerServiceServer()
}

func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	s.RegisterService(&ConsumerService_ServiceDesc, srv)
}

func _ConsumerService_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConsumerServiceServer).Consume(&consumerServiceConsumeServer{stream})
}

type ConsumerService_ConsumeServer interface {
	Send(*ConsumeResponse) error
	Recv() (*ConsumeMessages, error)
	grpc.ServerStream
}

type consumerServiceConsumeServer struct {
	grpc.ServerStream
}

func (x *consumerServiceConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *consumerServiceConsumeServer) Recv() (*ConsumeMessages, error) {
	m := new(ConsumeMessages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerService_ServiceDesc is the grpc.ServiceDesc for ConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConsumerService",
	HandlerType: (*ConsumerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _ConsumerService_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "consumerservice.proto",
}
